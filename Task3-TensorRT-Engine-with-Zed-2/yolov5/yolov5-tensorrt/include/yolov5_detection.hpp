/**
 * @file
 * 
 * @author      Noah van der Meer
 * @brief       YoloV5 inference through TensorRT
 * 
 * 
 * Copyright (c) 2021, Noah van der Meer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to 
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 * 
 */

/*  include guard   */
#ifndef _YOLOV5_DETECTION_HPP_
#define _YOLOV5_DETECTION_HPP_

#include <opencv2/opencv.hpp>

#include <yolov5_logging.hpp>

#include <vector>


namespace yolov5
{

/**
 * Represents an object detected in an image by the YoloV5 model
 */
class Detection
{
public:
    Detection() noexcept;


    Detection(const int& classId, const cv::Rect& boundingBox, 
                        const double& score) noexcept;


    ~Detection() noexcept;

public:
    /**
     * @brief               Retrieve the class id of the detection
     * 
     * If invalid (i.e. class is not set yet), this method
     * returns -1. Otherwise, if your network has NUM_CLASSES classes, any
     * Detection object generated by this library is _guaranteed_ to have a
     * classId value within [0, NUM_CLASSES - 1].
     */
    const int32_t& classId() const noexcept;


    /**
     * @brief               Retrieve a bounding box of the detection
     * 
     * Any Detection object generated by this library is _guaranteed_ to have
     * a bounding box completely within the original image provided to the
     * library for inference.
     */
    const cv::Rect& boundingBox() const noexcept;


    /**
     * @brief               Retrieve the score assigned to this detection
     * 
     * Any Detection object generated by this library is _guaranteed_ to have
     * a score within the interval [0, 1].
     * 
     * A high value indicates a high certainty, while a low value indicates
     * uncertainty.
     */
    const double& score() const noexcept;


    /**
     * @brief               Retrieve the name of the class of this detection,
     *                      if known.
     * 
     * YoloV5 inference only provides class numbers, not the corresponding
     * names of the classes. If you provide the list of class names to
     * the yolov5::Detector, it will automatically set them for the Detection
     * objects it outputs.
     * 
     * If the class name is unknown, the result is an empty string.
     */
    const std::string& className() const noexcept;


    /**
     * @brief               Set the class name
     * 
     * @param name          New name. Anything is allowed, even an empty string
     * @return              True on success, False otherwise 
     */
    bool setClassName(const std::string& name) noexcept;

private:
    int32_t             _classId;
    std::string         _className;

    cv::Rect            _boundingBox;
    double              _score;
};


/**
 * @brief               Helper method for visualizing a Detection in 
 *                      an image
 * 
 * Draws the bounding box of the detection in the specified color, as well as
 * a small label indicating the class(name) and the confidence. These texts
 * are drawn in white.
 * 
 * @param detection     Detection
 * @param image         Output image. Can be nullptr, in which case this
 *                      function has no effect.
 *
 * @param color         Color of the bounding box
 * @param fontScale     Scaling for the label. E.g. 1.0
 * 
 * Possible result codes:
 * - RESULT_SUCCESS : if successful
 * - RESULT_FAILURE_OPENCV_ERROR : in case an error was encountered when
 *  visualizing using OpenCV
 * 
 * @return              Result code 
 */
Result visualizeDetection(const Detection& detection, cv::Mat* image,
                            const cv::Scalar& color, 
                            const double& fontScale) noexcept;


/**
 * Represents the classes of your model
 * 
 * This can be used to map classIds to actual understandable names,
 * such as "human" or "suitcase".
 */
class Classes
{
public:
    Classes() noexcept;

    
    ~Classes() noexcept;

public:

    /**
     * @brief               Set the class names that should be used
     * 
     * ClassId 0 will correspond to names[0], ClassId 1 to names[1] etc.
     * 
     * 
     * If any code other than RESULT_SUCCESS is returned, this method has
     * no effect, and loading the classes may be attempted again at a later
     * time.
     * 
     * 
     * @param names         List of class names
     * 
     * @return              Result code 
     */
    Result load(const std::vector<std::string>& names) noexcept;


    /**
     * @brief               Try loading the class names as a list from a file

     * The expected file format is as following:
     * human
     * suitcase
     * mailbox
     * bike
     * car
     * ...
     * 
     * Each line contains one class name; this is also the format used by
     * the Darknet framework. Using the above example, human will correspond
     * to classId 0, suitcase to classId 1, etc...
     * 
     * 
     * If any code other than RESULT_SUCCESS is returned, this method has
     * no effect, and loading the classes may be attempted again at a later
     * time.
     * 
     * 
     * @param filepath      Path to file
     * 
     * @return              Result code 
     */
    Result loadFromFile(const std::string& filepath) noexcept;
    

    /**
     * @brief               Query whether the classes have been loaded
     * 
     * @return              True if loaded, False otherwise 
     */
    bool isLoaded() const noexcept;


    /**
     * @brief               Get the Class name corresponding to a ClassId
     * 
     * 
     * @param classId       Class id
     * @param out           Output. Can be nullptr
     * 
     * @return              Result code
     */
    Result getName(const int& classId, std::string* out) const noexcept;


    /**
     * @brief               Set the Logger to be used
     * 
     * Note that you normally do not have to worry about using this
     * method.
     * 
     * @param logger        Logger
     */
    void setLogger(std::shared_ptr<Logger> logger) noexcept;

private:
    std::shared_ptr<Logger>         _logger;

    std::vector<std::string>        _names;
};

}   /*  namespace yolov5    */

#endif  /*  include guard   */